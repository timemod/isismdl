% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IsisMdl.R
\docType{class}
\name{IsisMdl}
\alias{IsisMdl}
\title{An R6 class class representing an Isis model}
\format{\code{\link{R6Class}} object.}
\usage{
IsisMdl
}
\value{
Object of \code{\link{R6Class}} representing an Isis model.
}
\description{
This class is used to solve a system of non-linear equations with lagged
variables. The model equations are specified in a separate text file, the so
called model file. Function  \code{\link{isis_mdl}} parses the model file
and generates an \code{IsisMdl} object. The vignette "Introduction"
gives a detailed description of the usage of \code{IsisMdl} objects.
}
\details{
The syntax of the model file is the same of the syntax of model file
in Isis, and is described in detail in the Isis Reference Manual
(a vignette with a detailed model syntax description for package IsisMdl will be
available in a future).

The package included a number of example models in directory \code{models} of
the package library. Function \code{\link{copy_example_mdl}} is a convenience
function that can be used to copy these example models to your working directory.
It is also possible to directly create \code{IsisMdl} objects with functions
\code{\link{islm_mdl}} to create an ISLM model and \code{\link{ifn_mdl}}
to create another example model, the IFN model. The latter model is a model with
leads and can be solved with the Fair-Taylor-method.
}
\section{Methods}{


\code{IsisMdl} objects support the following methods. These methods
are described in detail in the different subsection of the documentation
For example, method \code{solve} is described in section
\code{\link{solve}}.
\describe{

\item{\code{\link{get_var_names}}}{Returns the names of the model
variables}

\item{\code{get_par_names}}{Returns the names of the model parameters}

\item{\code{\link{get_eq_names}}}{Returns the names of the equations.}

\item{\code{set_period(period)}}{Sets the model period. \code{period}
is a \code{\link{regperiod_range}} object or an object that can be coerced
to a \code{regperiod_range}. The model period is the longest period for which
the model may be solved. This method also allocates storage for
all model timeseries and constant adjustments. Model timeseries are
available for the so called 'model data period', which is
the model period extended with a lag and lead period. Constant
adjustments are only available for the model period. This method
also initialises all model timeseries with \code{NA} and all constant
adjusments with 0.}

\item{\code{get_period}}{Returns the model period}

\item{\code{get_data_period()}}{Returns the model data period}

\item{\code{set_labels(labels)}}{Set labels for the model variables. \code{labels}
 is a named character vector. The names are the names of the model variables.}

\item{\code{get_labels()}}{Returns the labels of the model variables.}

\item{\code{set_param(p)}}{Sets the model parameter. \code{p} is a named
list.}

\item{\code{get_param(pattern, names)}}{Returns the model parameter.
\code{pattern} is a regular expression, \code{names} is a vector with parameter
names.}

\item{\code{\link{set_data}}}{Transfer timeseries to the model data}

\item{\code{\link{set_ca}}}{Transfer timeseries to the constant adjustments}

\item{\code{\link{set_fix}}}{Transfer timeseries to the fix values} 

\item{\code{\link{set_fit}}}{Transfer timeseries to the fit targets} 

\item{\code{\link{set_values}}}{Sets the values of the model data}

\item{\code{\link{set_ca_values}}}{Sets the values of the constant 
adjustments}

\item{\code{\link{set_fix_values}}}{Sets the fix values}

\item{\code{\link{set_fit_values}}}{Sets the values of the fit targets}

\item{\code{\link{set_fit}}}{Transfer timeseries to the fit targets} 

\item{\code{\link{change_data}}}{Change model data by applying a function}

\item{\code{\link{change_data}}}{Change the constant adjusmtments by
applying a function}

\item{\code{\link{get_data}}}{Returns the model data}

\item{\code{\link{get_ca}}}{Returns the constant adjustments}

\item{\code{\link{get_fix}}}{Returns the fix values}

\item{\code{\link{get_fit}}}{Returns the fit targets}

\item{\code{\link{set_rms}}}{Sets or updates  the rms values}

\item{\code{\link{set_solve_options}}}{Sets the solve options}

\item{\code{\link{solve}}}{Solves the model}

\item{\code{\link{fill_mdl_data}}}{Calculates missing model
data from identities}

\item{\code{write_mdl(file)}}{Serializes the model object and writes it
to an RDS file.}
}
}

\examples{
# create an example ISLM  model
mdl <- islm_mdl()

# prepare input timeseries
r  <- regts(3.35, start = "2015Q1", end = "2016Q3", labels = "interest rate")
y  <- regts(980,  start = "2015Q1", end = "2016Q3", labels = "income")
yd <- regts(790, start = "2015Q1", labels = "disposable income")
g  <- regts(210 * cumprod(rep(1.015, 6)), start = "2015Q2",
            labels = "government spending")
ms <- regts(200 * cumprod(rep(1.015, 6)), start = "2015Q2",
           labels = "money supply")
islm_input <- cbind(r, y, yd, g, ms)
print(islm_input)

# set period and update model timeseries
mdl$set_period("2015Q2/2016Q3")
mdl$set_data(islm_input)

mdl$set_labels(c(i = "investment", c = "consumption", md = "money demand",
                t = "tax"))

mdl$solve()

\dontshow{
unlink("islm.*")
}

}
\seealso{
\code{\link{isis_mdl}}, \code{\link{islm_mdl}}
and \code{\link{ifn_mdl}}
}
\keyword{data}

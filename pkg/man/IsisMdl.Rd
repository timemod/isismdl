% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IsisMdl.R
\docType{class}
\name{IsisMdl}
\alias{IsisMdl}
\title{An R6 class class representing a macroecomic model}
\format{\code{\link{R6Class}} object.}
\usage{
IsisMdl
}
\value{
Object of \code{\link{R6Class}} representing a macroeconomic model.
}
\description{
An R6 class class representing a macroecomic model
}
\section{Methods}{

\describe{

\item{\code{get_var_names(pattern = ".*", vtype = c("all", "allfrml",
"all_endolead"))}}{Returns the names of the model variables. \code{pattern} is
a regular expression, \code{vtype} the variable type.}

\item{\code{get_par_names(pattern = ".*")}}{Returns
the names of the model parameters \code{pattern} is a regular expression.}

\item{\code{get_eq_names(pattern = ".*", vtype = c("all", "inactive"))}}{Returns
the names of the equations. \code{pattern} is a regular expression}

\item{\code{set_period(period)}}{Sets the model period. \code{period}
is a \code{\link{regperiod_range}} object or an object that can be coerced
to a \code{regperiod_range}. The model period is the longest period for which
the model may be solved. This method also allocates storage for
all model timeseries and constant adjustments. Model timeseries are
available for the so called 'model data period', which is
the model period extended with a lag and lead period. Constant
adjustments are only available for the model period. This method
also initialises all model timeseries with \code{NA} and all constant
adjusments with 0.}

\item{\code{get_period()}}{Returns the model period}

\item{\code{get_data_period()}}{Returns the model data period}

\item{\code{set_labels(labels)}}{Set labels for the model variables. \code{labels}
 is a named character vector. The names are the names of the model variables.}

\item{\code{get_labels()}}{Returns the labels of the model variables.}

\item{\code{set_param(p)}}{Sets the model parameter. \code{p} is a named
list.}

\item{\code{get_param(pattern, names)}}{Returns the model parameter.
\code{pattern} is a regular expression, \code{names} is a vector with parameter
names.}

\item{\code{set_[data|ca|fix|fit], names = colnames(data))}}{
The methods \code{set_data}, \code{set_ca}, \code{set_fix} and
\code{set_fit} can be used to set the values of the model data,
constant adjustments, fix values, and fit targets, respectively.
\code{data} is a \code{regts} or \code{ts} object. With argument \code{names}
the names of the timeseries in \code{data} can be specified. This argument
is mandatory if \code{data} does not have column names. If \code{data} has
labels, then method \code{set_data} will update the labels of the
corresponding model variables}

 \item{\code{get_data(pattern, names, period = self$get_data_period())}}{
 Returns the model data. \code{pattern} is
 a regular expression, \code{names} a list of variables
 and \code{period} an \code{\link[regts]{regperiod_range}} object
 or an object that can be coerced to \code{regperiod_range}.}

 \item{\code{get_ca(pattern, names, period = self$get_period())}}{
 Returns the constant adustments. \code{pattern} is
 a regular expression, \code{names} a list of variables
 and \code{period} an \code{\link[regts]{regperiod_range}} object
 or an object that can be coerced to \code{regperiod_range}.}

 \item{\code{get_[fix|fit]()}}{\code{get_fix} and \code{get_fit} return
 the fix values and fit targets, respecively.}
}
}
\examples{
# copy islm model and compile
copy_example_mdl("islm")
compile_mdl("islm.mdl")

# create the ISLM model based on the mif file
islm_model <- read_mdl("islm.mif")

#  set modelworkspace using example mws islm_input_mws
islm_model$set_mws(islm_input_mws)
islm_model$solve()
\dontshow{
unlink("islm.*")
}

}
\keyword{data}


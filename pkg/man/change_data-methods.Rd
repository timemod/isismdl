% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IsisMdl_doc.R
\name{change_data-methods}
\alias{change_data-methods}
\alias{change_data}
\alias{change_ca}
\title{\code{\link{IsisMdl}} methods: changes the model data or constant
adjustments by applying a function.}
\description{
This methods of R6 class \code{\link{IsisMdl}}
changes the model data or constant adjustments by applying a function.
}
\section{Usage}{

\preformatted{
mdl$change_data(fun, names, pattern, period = mdl$get_data_period())

mdl$change_ca(fun names, pattern, period = mdl$get_data_period())
}

\code{mdl} is an \code{\link{IsisMdl}} object
}

\section{Arguments}{


\describe{
\item{\code{fun}}{a function applied each model timeseries or
constant adjustment specified with argument \code{names} or \code{pattern}}
\item{\code{names}}{a character vector with variable names}
\item{\code{pattern}}{a regular expression}
\item{\code{period}}{an \code{\link[regts]{period_range}} object or an
object that can be coerced to a \code{period_range}}
\item{\code{...}}{arguments passed to \code{fun}}
}
}

\section{Details}{


The function specified with argument \code{fun} should be a function
with at least one argument, for example \code{fun = function(x) {x + 0.1}}.
The first argument (named \code{x} in the example) will be the model
variable. The function is evaluated for each model variable separately.
The values of the model variables for period range \code{period} are passed as a
normal numeric vector (not a timeseries) to the first argument.

An example may help to clarify this. Consider the following statement\preformatted{mdl$change_data(fun = myfun, names = c("c", "y"),
                     period = "2017q1/2017q2"),
}

where \code{mdl} is a \code{DynMdl} object and \code{myfun} some function whose details
are not relevant here. Method  \code{change_data} evaluates this as\preformatted{data <- mdl$get_data(names = c("c", "y"), period = "2017q1/2017q2")
data[, "c"] <- myfun(as.numeric(data[, "c"]))
data[, "y"] <- myfun(as.numeric(data[, "y"]))
mdl$set_data(data)
}

The function result must be a vector (or timeseries) of length one or with
the same length as the number of periods in the period range \code{period}.
}

\section{Methods}{

\describe{
\item{\code{changes_data}}{Changes the model data}
\item{\code{change_ca}}{Changes the constant adjustments}
}
}

\examples{
mdl <- islm_mdl(period = "2017Q1/2017Q3")

# increase y and yd with 10\% for the full data period
mdl$change_data(pattern = "^y.?$", fun = function(x) {x * 1.1})

# increase ms in 2017Q1 and 2017Q2 with 10 and 20, resp.
mdl$change_data(names = "ms", fun = function(x, dx) {x + dx},
                dx = c(10, 20), period = "2017Q1/2017Q2")
print(mdl$get_data())

}
\seealso{
\code{\link{get_data-methods}}, \code{\link{set_data-methods}} and
\code{\link{set_values-methods}}
}

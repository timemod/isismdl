% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/isis_mdl.R
\name{isis_mdl}
\alias{isis_mdl}
\title{Creates an \code{\link{IsisMdl}} object from a model file.}
\usage{
isis_mdl(model_file, period, data, ca, fix_values, parse_options)
}
\arguments{
\item{model_file}{The name of the model file.
An extension \code{mdl} is appended to the specified name if the filename
does not already have an extension}

\item{period}{a \code{\link[regts]{period_range}} object}

\item{data}{the model data as a  \code{\link[regts]{regts}} object with column
names}

\item{ca}{the constant adjustments as a  \code{\link[regts]{regts}} object
with column names}

\item{fix_values}{the fix values as a  \code{\link[regts]{regts}} object
with column names}

\item{parse_options}{a named list with options passed to the model parser.
See section "Parse options"}
}
\description{
This function creates an \code{\link{IsisMdl}} object.
A model as defined on an external ASCII file is parsed, analysed and
converted into an internal code. This internal code is used to evaluate
the model equations.
}
\details{
The file containing the model must have an extension \code{mdl}.

Some technical information about the model and a
cross reference of the model is written
to an external file with extension \code{mrf}.
For each variable its maximum lag and lead are given and a list
of equations (by name) in which it occurs.

The parser also orders the equations of the model into three
separate blocks.

\itemize{
\item
the \emph{pre-recursive} block  containing equations
which can be solved recursively from exogenous and lagged
variables only.
\item
the \emph{simultaneous} block containing all equations
with interdependent endogenous variables.
\item
the \emph{post-recursive} block containing equations
which can be solved recursively once the two previous blocks
have been solved.
}
The ordering process also provides a list of so-called feedback
variables, i.e. variables whose value must be assumed known to
make the \emph{simultaneous} block recursive.
Initial guesses for these variables must be provided in order to
solve a model.
If a model has no feedback variables, it is a recursive model (it
can be solved in one pass through the equations).

If the parser encounters errors in the model, these are written
to a file with an extension \code{err}.
All generated files have the same basename as the model file.
}
\section{Parse options}{


The following parse options can be specified with argument
\code{parse_options}. This argument should be a named list
\describe{
\item{\code{"flags"}}{This flag is used for conditional compilation.
Consult Section 3.11.2 "Conditional compilation" in the Isis reference
manual for more information about conditional compilation}
\item{\code{"include_dirs"}}{Add directory \code{include_dir} to the list of
 directories to be searched for include files.
 In the model file, the \code{\#include} directive (see Section
 3.11.1 "File inclusion" in the Isis Reference Manual) is used
to include another file in the model. The specified name of the include
file can be a relative or absolute path. If the path is relative, then
the model searches for the include file.
It first searches in the same directory
where the source file is located. If not found there,
then the compiler searches in the directories specified with
argument \code{include_dir}, in the order that the directories
have been specified.
If the include file is still not found, the parser
searches in the current directory}
\item{\code{"gen_dep_file"}}{Specify \code{TRUE} to generate a file with
dependency information. The default is \code{FALSE}.
The dependency information is written to an external file with extension
\code{dep}. The file gives for each equation a list of the variables that occur
in the right hand side of the equation with lags and leads included.
This file may be useful for model analysis with other software.
Currently this option cannot be used for models with user functions}
}
}

\examples{

# copy the islm.mdl file in the directory models of the package
# directory to the current directory
mdl_file <- system.file("models", "islm.mdl", package = "isismdl")
file.copy(mdl_file, "islm.mdl")

mdl <- isis_mdl("islm.mdl")

# an example with parse option "include_dirs":
mdl <- isis_mdl("islm.mdl", parse_options = list(include_dirs = "mdlincl"))

\dontshow{
unlink("islm.*")
}
}
\seealso{
\code{\link{IsisMdl}}, \code{\link{islm_mdl}} and
\code{\link{ifn_mdl}}
}
